'use client';

import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import Image from 'next/image';
import { DM_Sans } from 'next/font/google';
import { client } from '@/sanity/lib/client'

const dmSans = DM_Sans({
  subsets: ['latin'],
  weight: ['400', '500', '700'],
});

const routes: { [key: string]: string } = {
  director: '/dashboard',
  'gm-sales': '/Anas-Nayyar/Dashboard',
  'sales-manager': '/Aziz-Ahmed/Dashboard',
  execution: '/Execution/Dashboard',
  mechanical: '/Mechanical/drawings',
  store: '/Store/inventory',
};

export default function LoginPage() {
  const router = useRouter();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [isAdminMode] = useState(false); // Optional

  const fetchPassword = async (role: string): Promise<string | null> => {
    const queries: { [key: string]: string } = {
      director: `*[_type == "directorPassword"][0].password`,
      'gm-sales': `*[_type == "gmSalesPassword"][0].password`,
      'sales-manager': `*[_type == "salesManagerPassword"][0].password`,
      execution: `*[_type == "executionPassword"][0].password`,
      mechanical: `*[_type == "mechanicalPassword"][0].password`,
      store: `*[_type == "storePassword"][0].password`,
    };

    const query = queries[role];
    if (!query) return null;

    try {
      const result = await client.fetch(query);
      return result || null;
    } catch (err) {
      console.error('Failed to fetch password:', err);
      return null;
    }
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const storedPassword = await fetchPassword(username);

    if (storedPassword && storedPassword === password) {
      localStorage.setItem('user', username);
      router.push(routes[username]);
    } else {
      setError('Invalid username or password');
      setLoading(false);
    }
  };

  return (
    <div
      className={`min-h-screen flex items-center bg-cover justify-center bg-center relative ${dmSans.className}`}
      style={{ backgroundImage: "url('/loginn.jpg')" }}
    >
      <div className="absolute inset-0 bg-black opacity-50 z-0" />

      <form
        onSubmit={handleLogin}
        className="bg-gray-50 p-8 rounded-lg shadow-md w-80 space-y-4 relative z-10"
      >
        <div className="flex justify-center mb-4">
          <Image
            src="/logo.png"
            alt="Company Logo"
            width={180}
            height={180}
            className="rounded-md object-contain"
          />
        </div>

        <h1 className="text-2xl font-bold tracking-wide text-center text-gray-800">
          Sign In
        </h1>

        {error && (
          <p className="text-red-500 text-sm tracking-wide text-center">{error}</p>
        )}

        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700 tracking-wide">
            Username
          </label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-black tracking-wide"
            required
          />
        </div>

        <div className="space-y-2 relative">
          <label className="block text-sm font-medium text-gray-700 tracking-wide">
            Password
          </label>
          <input
            type={showPassword ? 'text' : 'password'}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-black tracking-wide pr-10"
            required
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-1/2 pt-3 -translate-y-1/2 text-gray-600 hover:text-black focus:outline-none"
            tabIndex={-1}
          >
            {showPassword ? <FaEyeSlash size={18} /> : <FaEye size={18} />}
          </button>
        </div>

        <button
          type="submit"
          disabled={loading}
          className={`w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-black hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black tracking-wide ${
            loading ? 'opacity-50 cursor-not-allowed' : ''
          }`}
        >
          {loading ? 'Logging in...' : 'Login'}
        </button>

        <div className="pt-2 border-t text-center text-xs text-gray-800">
          <p>System and Software generated by Muhammad Hassan Jaffer</p>
          {isAdminMode && (
            <p className="mt-1 text-[#8B5E3C] font-medium">Admin Mode Active</p>
          )}
        </div>
      </form>
    </div>
  );
}


// 'use client';

// import { useRouter } from 'next/navigation';
// import { useEffect, useState } from 'react';
// import { FaEye, FaEyeSlash } from 'react-icons/fa';
// import Image from 'next/image';
// import { DM_Sans } from 'next/font/google';
// import { client } from '@/sanity/lib/client'; // ✅ Adjust path if needed

// const dmSans = DM_Sans({
//   subsets: ['latin'],
//   weight: ['400', '500', '700'],
// });

// interface User {
//   username: string;
//   password: string;
//   route: string;
// }

// export default function LoginPage() {
//   const router = useRouter();
//   const [users, setUsers] = useState<User[]>([]);
//   const [username, setUsername] = useState('');
//   const [password, setPassword] = useState('');
//   const [error, setError] = useState('');
//   const [loading, setLoading] = useState(false);
//   const [showPassword, setShowPassword] = useState(false);

//   // 🔁 Fetch users from Sanity
//   useEffect(() => {
//     const fetchUsers = async () => {
//       const data = await client.fetch<User[]>(`*[_type == "user"]{username, password, route}`);
//       setUsers(data);
//     };
//     fetchUsers();
//   }, []);

//   const handleLogin = (e: React.FormEvent) => {
//     e.preventDefault();
//     setLoading(true);
//     setError('');

//     setTimeout(() => {
//       const matchedUser = users.find(
//         (user) => user.username === username && user.password === password
//       );

//       if (matchedUser) {
//         localStorage.setItem('user', matchedUser.username);
//         router.push(matchedUser.route);
//       } else {
//         setError('Invalid username or password');
//         setLoading(false);
//       }
//     }, 500);
//   };

//   return (
//     <div
//       className={`min-h-screen flex items-center bg-cover justify-center bg-center relative ${dmSans.className}`}
//       style={{ backgroundImage: "url('/loginn.jpg')" }}
//     >
//       <div className="absolute inset-0 bg-black opacity-50 z-0" />

//       <form
//         onSubmit={handleLogin}
//         className="bg-gray-50 p-8 rounded-lg shadow-md w-80 space-y-4 relative z-10"
//       >
//         <div className="flex justify-center mb-4">
//           <Image
//             src="/logo.png"
//             alt="Company Logo"
//             width={180}
//             height={180}
//             className="rounded-md object-contain"
//           />
//         </div>

//         <h1 className="text-2xl font-bold tracking-wide text-center text-gray-800">
//           Sign In
//         </h1>

//         {error && (
//           <p className="text-red-500 text-sm tracking-wide text-center">{error}</p>
//         )}

//         <div className="space-y-2">
//           <label className="block text-sm font-medium text-gray-700 tracking-wide">
//             Username
//           </label>
//           <input
//             type="text"
//             value={username}
//             onChange={(e) => setUsername(e.target.value)}
//             className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-black tracking-wide"
//             required
//           />
//         </div>

//         <div className="space-y-2 relative">
//           <label className="block text-sm font-medium text-gray-700 tracking-wide">
//             Password
//           </label>
//           <input
//             type={showPassword ? 'text' : 'password'}
//             value={password}
//             onChange={(e) => setPassword(e.target.value)}
//             className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-black tracking-wide pr-10"
//             required
//           />
//           <button
//             type="button"
//             onClick={() => setShowPassword(!showPassword)}
//             className="absolute right-3 top-1/2 pt-3 -translate-y-1/2 text-gray-600 hover:text-black focus:outline-none"
//             tabIndex={-1}
//           >
//             {showPassword ? <FaEyeSlash size={18} /> : <FaEye size={18} />}
//           </button>
//         </div>

//         <button
//           type="submit"
//           disabled={loading}
//           className={`w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-black hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black tracking-wide ${
//             loading ? 'opacity-50 cursor-not-allowed' : ''
//           }`}
//         >
//           {loading ? 'Logging in...' : 'Login'}
//         </button>

//         <div className="pt-2 border-t text-center text-xs text-gray-800">
//           <p>System and Software generated by Muhammad Hassan Jaffer</p>
//         </div>
//       </form>
//     </div>
//   );
// }
